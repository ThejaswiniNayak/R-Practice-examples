setwd("C:/Users/pt2/Documents/Personal/R prcatice/module3")
ls()
library(RODBC)
thejaswini_db<-odbcConnect("mysql",uid="root")
result1 <- data.frame(sqlQuery(thejaswini_db, "SELECT * from hp.rq_rol_x_buss1"))
head(result1,n=10)
summary(result1)
nlab1 = result1[,2:4]
View(nlab1)
View(nlab1)
nlab1=data.frame(result1$Requestor_Role,result1$Open_1st_shift)
names(nlab1)=c("Requestor_Role","Open_1st_shift")
dim(nlab1)
typeof(nlab1)
class(nlab1)
summary(nlab1)
cor(result1)
rm(result1)
result1 = nlab1
save(result1, file="result.csv")
rm(nlab1)
ls()
n=1 #scalar variable
setwd("C:/Users/pt2/Documents/Personal/R prcatice/module3")
ls()
library(RODBC)
thejaswini_db<-odbcConnect("mysql",uid="root")
result1 <- data.frame(sqlQuery(thejaswini_db, "SELECT * from hp.rq_rol_x_buss1"))
ds=result1
ls()
summary(result1$opps_sum)
range(result1$opps_sum)
sd(result1$opps_sum)
var(result1$opps_sum)
plot(density(result1$opps_sum))
plot(as.factor(result1$opps_sum))
(m=mean(result1$opps_sum, trim=0.10))
ds=subset(result1,result1$opps_sum < 47)
summary(ds)
quantile(ds$opps_sum, seq(from=0, to=1, length=11)
plot(hist(result1$opps_sum))
plot(histogram(result1$opps_sum))
#startifing/arranging/clasifing a variable
breaks = c(0,2,10,20,30,47)
range_grid = c("Very less","less","normal","high","Very high")
range_type = cut(ds$opps_sum,breaks,range_grid) # catogorize Opps_sum into range_grid
# add wealth  as a column to ds
ds = cbind(ds,range_type)
print(ds)
wt=table(range_type)
precent=wt/sum(wt)*100
wt=rbind(wt,precent)
wt
plot(wt)
nt=table(range_type,ds$Open_1st_shift)
print(nt)
plot(nt)
rm(range_type,range_grid,breaks,wealth,labels)
save(ds,wt,nt,file="categorising desnsity and frequency distribution.Rdata")
library(Mass)
with (ds, {
hist(opps_sum, main="distribution of houseold Income", freq= FALSE)
lines(density(opps_sum), lty=2, lwd=2)
xvals=seq(from=min(opps_sum), to=max(opps_sum), length=100)
param=fitdistr(opps_sum,"lognormal")
lines(xvals, dlnorm(xvals, meanlog=param$estimate[1],
sdlog=param$estimate[2]), col="blue")
})
with(ds, cor(opps_sum,sqrt(opps_sum)))
with(ds, cor(log(opps_sum),opps_sum))
n=length(ds$opps_sum)
with(ds,cor(runif(n),opps_sum))
with(ds,
boxplot(opps_sum~ as.factor(Requestor_Role),data=ds, range=0,outline=F,log="y",
xlab="#Requestor_role", ylab="Opps_sum"))
with(ds,
boxplot(opps_sum~ range_type,data=ds,
main="Opps_sum by range_type", xlab="#Requestor_role", ylab="Opps_sum"))
setwd("C:/Users/pt2/Documents/Personal/R prcatice/module3")
offers=sample(c("noffer","offer1","offer2"),size=500,replace=T)
head(offers)
purchasesize=ifelse (offers=="noffer",rlnorm(500,meanlog=log(25)),
ifelse (offers=="offer1",rlnorm(500,meanlog=log(50)),
rlnorm(500,meanlog = log(55))))
head(purchasesize)
offertest=data.frame(offer=offers,purchase_amt=purchasesize)
head(offertest)
summary(offertest)
aggregate(x=offertest$purchase_amt,by=list(offertest$offer),FUN="mean")
# plot how purchase size is differs with 3 groups
boxplot(purchase_amt~as.factor(offers),data=offertest,log="y")
model=lm(log10(purchase_amt)~as.factor(offers),data=offertest)
summary(model)
TukeyHSD(aov(model))
library(lattice)
densityplot(~purchase_amt,group=offers,data=offertest, auto.key=T)#left skewed
densityplot(~log10(purchase_amt),group=offers,data=offertest, auto.key=T)#plot comming middle
densityplot(~purchase_amt|offers,data=offertest)
densityplot(~log(purchase_amt)|offers,data=offertest)
barplot(~log(purcahse_amt)|offers,data=offertest)
#ggplot grammer of grafix
library(ggplot2)
ggplot(data=offertest,aes(x=as.factor(offers),y=purchase_amt))+
geom_point(position = "jitter",alpha=0.2)+
geom_boxplot(alpha=0.1,outlier.size=0)+
scale_y_log10()
#step1 generate the example data
x=rnorm(10)#distributions centered at 0
y=rnorm(2,10)#distributions centered at 2
pooled.var=function(x,y){
nx=length(x)
ny=length(y)
stdx=sd(x)
stdy=sd(y)
num=(nx-1)*stdx^2+(ny-1)*stdy^2
denom=nx+ny-2 #degrees of freedom
(num/denom)*(1/nx+1/ny)
}
mx=mean(x)
my=mean(y)
mx-my
pooled.var(x,y)
#step4 caliculate the t statistic for student's t-test
tstat=(mean(x)-mean(y))/sqrt(pooled.var(x,y))
tstat
#step5 Calculate the degrees of feedom for out problem
dof=length(x)+length(y)-2
dof
#step6 the function pt(x,dof) gives the area under the curve
tailarea=pt(tstat,dof)
pvalue=2*tailarea
#step7 do students t-test directly ,and compare the results
t.test(x,y,var.equal=T)
setwd("~/")
set.seed(654655)
v1 = rnorm(10000,10,5)
#validate the normality of the values
#with a histogram and normal Q-Q plot
hist(v1)
qqnorm(v1)
#but with a different seed
set.seed(54635756)
v2 = rnorm(10000,10,5)
#examine the relationship between these two vectors
plot(v1,v2)
plot(v1,v2)
sum(v1==v2)
cor(v1,v2)
set.seed(654655)
v3 = rnorm(10000,10,5)
set.seed(654655)
v4 = rnorm(10000,10,5)
sum(v3==v4)
plot(v3,v4)
cor(v3,v4)
set.seed(654655)
v5=rnorm(10000,10,5)
set.seed(654655)
v5=rnorm(10000,0,2)
sum(v5==v6)
hist(v5)
hist(v6)
plot(v5,v6)
cor(v5,v6)
set.seed(654655)
v5=rnorm(10000,10,5)
set.seed(654655)
v6=rnorm(10000,0,2)
sum(v5==v6)
hist(v5)
hist(v6)
plot(v5,v6)
cor(v5,v6)
.Random.seed
#display the help information relative to random number generator
?Random
arrival_rate = 10
#the time to perform the service is uniformly distributed
#-- between 1 and 6 minutes converted to hours to keep units aligned with the arrival_rate
min_service_time=1/60
max_service_time=6/60
arrival_rate = 10
#the time to perform the service is uniformly distributed
#-- between 1 and 6 minutes converted to hours to keep units aligned with the arrival_rate
min_service_time=1/60
max_service_time=6/60
#number of customers for the simulation
num_of_custs = 50000
set.seed(238947123)
arrivals=rexp(num_of_custs,arrival_rate)
hist(arrivals*60)
#number of customers for the simulation
num_of_custs = 50000
#randomly generate the time between customer arrivals
set.seed(238947123)
arrivals=rexp(num_of_custs,arrival_rate)
#view the distribution of the arrival times
hist(arrivals*60)
#randomly generate the service times for each customer
set.seed(34556463)
serv_times=runif(num_of_custs,min=min_service_time,max=max_service_time)
#view the distibution of the service times
hist(serv_times)
hist(serv_times,breaks=((2:12)*.5)/60)
cumul_arrivals=cumsum(arrivals)
arrivals[1:5]
cumul_arrivals[1:4]
compl_time=vector(mode='numeric',length=num_of_custs)
#add first customer to the system
compl_time[1]=cumul_arrivals[1]+serv_times[1]
for (i in 2:num_of_custs) {
compl_time[i]=max(cumul_arrivals[i],compl_time[i-1])+serv_times[i]
}
time_in_queue = compl_time-(cumul_arrivals+serv_times)
queue_size=vector(mode='integer',length='num_of-Custs')
queue_size[1]=0
queue_size[1]=0
for (i in 2:num_of_custs){
queue_size[i]=sum(compl_time[1:i-1]>cumul_arrivals[i])
}
queue_size=vector(mode='integer',length='num_of_Custs')
queue_size[1]=0
for (i in 2:num_of_custs){
queue_size[i]=sum(compl_time[1:i-1]>cumul_arrivals[i])
}
queue_size=vector(mode="integer",length='num_of_Custs')
queue_size[1]=0
for (i in 2:num_of_custs){
queue_size[i]=sum(compl_time[1:i-1]>cumul_arrivals[i])
}
queue_size=vector(mode="integer",length=num_of_Custs)
queue_size[1]=0
for (i in 2:num_of_custs){
queue_size[i]=sum(compl_time[1:i-1]>cumul_arrivals[i])
}
queue_size=vector(mode="integer",length=num_of_custs)
queue_size[1]=0
for (i in 2:num_of_custs){
queue_size[i]=sum(compl_time[1:i-1]>cumul_arrivals[i])
}
summary(queue_size)
hist(queue_size,breaks = 0:15, right=FALSE)
#probabilty that a customer will not have to wait in the queue
sum(queue_size==0)/num_of_custs
summary(time_in_queue*60)
hist(time_in_queue*60)
summary(time_in_queue[time_in_queue>0]*60)
hist(time_in_queue[time_in_queue>0]*60)
summary((time_in_queue+serv_times)*60)
hist((time_in_queue+serv_times)*60)
plot(density((time_in_queue+serv_times)*60))
sum(((time_in_queue+serv_times)*60)>10)/num_of_custs
sum(((time_in_queue+serv_times)*60)>10)/num_of_custs
setwd("C:/Users/pt2/Documents/Personal/Study/Data Science Specialist/Module 5")
nurseryData=read.csv("Nursary Data.csv",as.is=TRUE)
summary(nurseryData)
nurseryData[sapply(nurseryData,is.character)]=
lapply(nurseryData[Sapply(nurseryData, is.character)], as.factor)
#this is needed for the Random forest algorithum to work in R
nurseryData[sapply(nurseryData,is.character)]=
lapply(nurseryData[sapply(nurseryData, is.character)], as.factor)
summary(nurseryData)
